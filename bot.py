import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ bot.py:
import threading
from flask import Flask

app = Flask(__name__)

def run_bot():
    # –í–∞—à –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    application.run_polling()

@app.route('/')
def home():
    return "Bot is active!"

if __name__ == '__main__':
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.start()
    app.run(host='0.0.0.0', port=10000)
Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    ContextTypes
)
from psycopg2 import connect, sql

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TG_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
REGISTER_NAME, REGISTER_AGE, REGISTER_GENDER, REGISTER_PHOTO, REGISTER_INTERESTS = range(5)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    try:
        conn = connect(DATABASE_URL)
        with conn.cursor() as cur:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    name VARCHAR(100),
                    age INTEGER,
                    gender VARCHAR(10),
                    photo TEXT,
                    interests TEXT[],
                    banned BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT NOW()
                );
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –ª–∞–π–∫–æ–≤
            cur.execute("""
                CREATE TABLE IF NOT EXISTS likes (
                    id SERIAL PRIMARY KEY,
                    user_from BIGINT,
                    user_to BIGINT,
                    created_at TIMESTAMP DEFAULT NOW(),
                    UNIQUE(user_from, user_to)
            """)
        conn.commit()
    except Exception as e:
        logger.error(f"Database error: {e}")
    finally:
        if conn:
            conn.close()

init_db()

# ======================= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    conn = connect(DATABASE_URL)
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT * FROM users WHERE user_id = %s", (user.id,))
            if cur.fetchone():
                await update.message.reply_text(
                    "üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/search - –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n"
                    "/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
                )
                return
    finally:
        conn.close()

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    return REGISTER_NAME

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üìÖ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    return REGISTER_AGE

async def register_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit():
        await update.message.reply_text("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
        return REGISTER_AGE
    context.user_data['age'] = int(update.message.text)
    reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']]
    await update.message.reply_text(
        "üöª –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return REGISTER_GENDER

async def register_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['gender'] = update.message.text
    await update.message.reply_text("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:")
    return REGISTER_PHOTO

async def register_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1].file_id
    context.user_data['photo'] = photo
    await update.message.reply_text("üéÆ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    return REGISTER_INTERESTS

async def register_interests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    interests = [x.strip() for x in update.message.text.split(',')]
    user = update.message.from_user
    
    conn = connect(DATABASE_URL)
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO users 
                (user_id, name, age, gender, photo, interests)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (
                user.id,
                context.user_data['name'],
                context.user_data['age'],
                context.user_data['gender'],
                context.user_data['photo'],
                interests
            ))
        conn.commit()
    except Exception as e:
        logger.error(f"DB error: {e}")
    finally:
        conn.close()
    
    await update.message.reply_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç"
    )
    return ConversationHandler.END

# ======================= –ü–û–ò–°–ö –ò –õ–ê–ô–ö–ò =======================

async def search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    conn = connect(DATABASE_URL)
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT * FROM users 
                WHERE user_id != %s 
                AND banned = FALSE 
                ORDER BY RANDOM() 
                LIMIT 1
            """, (user.id,))
            profile = cur.fetchone()
            
            if not profile:
                await update.message.reply_text("üò¢ –ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç")
                return

            keyboard = [
                [
                    InlineKeyboardButton("‚ù§Ô∏è", callback_data=f'like_{profile[0]}'),
                    InlineKeyboardButton("üëé", callback_data=f'dislike_{profile[0]}')
                ]
            ]
            await update.message.reply_photo(
                photo=profile[4],
                caption=f"üë§ {profile[1]}, {profile[2]}\nüéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(profile[5])}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    finally:
        conn.close()

async def like_dislike_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action, target_id = query.data.split('_')
    user_id = query.from_user.id
    target_id = int(target_id)
    
    conn = connect(DATABASE_URL)
    try:
        with conn.cursor() as cur:
            if action == 'like':
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞
                cur.execute("""
                    SELECT * FROM likes 
                    WHERE user_from = %s AND user_to = %s
                """, (target_id, user_id))
                
                if cur.fetchone():
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üíå –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_id}"
                    )
                    await context.bot.send_message(
                        chat_id=target_id,
                        text=f"üíå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username} —Ç–æ–∂–µ –≤–∞—Å –ª–∞–π–∫–Ω—É–ª!"
                    )
                else:
                    cur.execute("""
                        INSERT INTO likes (user_from, user_to) 
                        VALUES (%s, %s)
                        ON CONFLICT DO NOTHING
                    """, (user_id, target_id))
            else:
                cur.execute("""
                    DELETE FROM likes 
                    WHERE user_from = %s AND user_to = %s
                """, (user_id, target_id))
            conn.commit()
    finally:
        conn.close()

# ======================= –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =======================

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return
    
    try:
        target_id = int(context.args[0])
        conn = connect(DATABASE_URL)
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE users SET banned = TRUE 
                WHERE user_id = %s
            """, (target_id,))
            conn.commit()
        await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω")
    except:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")

# ======================= –ó–ê–ü–£–°–ö –ë–û–¢–ê =======================

def main():
    application = Updater(TOKEN).application

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            REGISTER_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_age)],
            REGISTER_GENDER: [MessageHandler(filters.Regex('^(–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$'), register_gender)],
            REGISTER_PHOTO: [MessageHandler(filters.PHOTO, register_photo)],
            REGISTER_INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_interests)],
        },
        fallbacks=[]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("search", search_profiles))
    application.add_handler(CommandHandler("ban", ban_user))
    application.add_handler(CallbackQueryHandler(like_dislike_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
