import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext
)
from psycopg2 import connect, sql

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TG_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = connect(DATABASE_URL)
    with conn.cursor() as cur:
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                user_id INTEGER UNIQUE,
                name VARCHAR(50),
                age INTEGER,
                gender VARCHAR(10),
                photo TEXT,
                interests TEXT[],
                banned BOOLEAN DEFAULT FALSE
            );
            CREATE TABLE IF NOT EXISTS likes (
                id SERIAL PRIMARY KEY,
                user_from INTEGER,
                user_to INTEGER,
                UNIQUE(user_from, user_to)
            );
        """)
    conn.commit()
    conn.close()

init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
REGISTER, EDIT = range(2)

def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    conn = connect(DATABASE_URL)
    with conn.cursor() as cur:
        cur.execute("SELECT * FROM users WHERE user_id = %s", (user.id,))
        if not cur.fetchone():
            update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            return REGISTER
        else:
            show_profile(update, user.id)
    conn.close()
    return ConversationHandler.END

def register_name(update: Update, context: CallbackContext):
    context.user_data['name'] = update.message.text
    update.message.reply_text("üìÖ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    return REGISTER

def register_age(update: Update, context: CallbackContext):
    context.user_data['age'] = update.message.text
    reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']]
    update.message.reply_text(
        "üöª –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return REGISTER

def register_gender(update: Update, context: CallbackContext):
    context.user_data['gender'] = update.message.text
    update.message.reply_text("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:")
    return REGISTER

def register_photo(update: Update, context: CallbackContext):
    photo = update.message.photo[-1].file_id
    context.user_data['photo'] = photo
    update.message.reply_text("üéÆ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    return REGISTER

def register_interests(update: Update, context: CallbackContext):
    interests = [x.strip() for x in update.message.text.split(',')]
    user = update.message.from_user
    conn = connect(DATABASE_URL)
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO users (user_id, name, age, gender, photo, interests)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (user.id, context.user_data['name'], context.user_data['age'], 
             context.user_data['gender'], context.user_data['photo'], interests))
    conn.commit()
    conn.close()
    update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞")
    return ConversationHandler.END

def search_profiles(update: Update, context: CallbackContext):
    user = update.message.from_user
    conn = connect(DATABASE_URL)
    with conn.cursor() as cur:
        cur.execute("""
            SELECT * FROM users 
            WHERE user_id != %s 
            AND banned = FALSE 
            LIMIT 1
        """, (user.id,))
        profile = cur.fetchone()
        if profile:
            keyboard = [
                [InlineKeyboardButton("‚ù§Ô∏è", callback_data=f'like_{profile[1]}'),
                 InlineKeyboardButton("üëé", callback_data=f'dislike_{profile[1]}')]
            ]
            update.message.reply_photo(
                photo=profile[5],
                caption=f"üë§ {profile[2]}, {profile[3]}\nüéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(profile[6])}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text("üò¢ –ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç")
    conn.close()

def like_dislike_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    action, target_id = query.data.split('_')
    user_id = query.from_user.id
    
    conn = connect(DATABASE_URL)
    with conn.cursor() as cur:
        if action == 'like':
            cur.execute("""
                INSERT INTO likes (user_from, user_to)
                VALUES (%s, %s)
                RETURNING id
            """, (user_id, target_id))
            
            cur.execute("""
                SELECT * FROM likes 
                WHERE user_from = %s AND user_to = %s
            """, (target_id, user_id))
            if cur.fetchone():
                context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíå –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {target_id}! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
                )
                context.bot.send_message(
                    chat_id=target_id,
                    text=f"üíå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–æ–∂–µ –≤–∞—Å –ª–∞–π–∫–Ω—É–ª! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
                )
        else:
            cur.execute("""
                DELETE FROM likes 
                WHERE user_from = %s AND user_to = %s
            """, (user_id, target_id))
    conn.commit()
    conn.close()
    query.answer()

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
def ban_user(update: Update, context: CallbackContext):
    if update.message.from_user.id == ADMIN_ID:
        target_id = int(context.args[0])
        conn = connect(DATABASE_URL)
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE users SET banned = TRUE 
                WHERE user_id = %s
            """, (target_id,))
        conn.commit()
        conn.close()
        update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω")

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTER: [
                MessageHandler(Filters.text & ~Filters.command, register_name),
                MessageHandler(Filters.photo, register_photo),
                MessageHandler(Filters.regex('^(–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$'), register_gender),
                MessageHandler(Filters.text & ~Filters.command, register_interests)
            ]
        },
        fallbacks=[]
    )

    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("search", search_profiles))
    dp.add_handler(CommandHandler("ban", ban_user))
    dp.add_handler(CallbackQueryHandler(like_dislike_handler))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
