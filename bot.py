import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, CallbackContext,
    ConversationHandler, CallbackQueryHandler
)
import psycopg2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
NAME, AGE, ORIENTATION, ROLE, LOCATION, BIO, PHOTO = range(7)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
def get_db():
    return psycopg2.connect(DATABASE_URL)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def create_tables():
    conn = get_db()
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            name TEXT,
            age INTEGER,
            orientation TEXT,
            role TEXT,
            location TEXT,
            bio TEXT,
            photos TEXT[]
        )
    ''')
    conn.commit()
    cur.close()
    conn.close()

# /start
def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return NAME

# –ò–º—è
def name(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    update.message.reply_text("üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

# –í–æ–∑—Ä–∞—Å—Ç
def age(update: Update, context: CallbackContext) -> int:
    try:
        age = int(update.message.text)
        context.user_data['age'] = age
    except:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä: 25")
        return AGE

    keyboard = [
        [InlineKeyboardButton("–ì–µ–π", callback_data="–≥–µ–π")],
        [InlineKeyboardButton("–ë–∏", callback_data="–±–∏")],
        [InlineKeyboardButton("–¢—Ä–∞–Ω—Å", callback_data="—Ç—Ä–∞–Ω—Å")],
        [InlineKeyboardButton("–ì–µ—Ç–µ—Ä–æ", callback_data="–≥–µ—Ç–µ—Ä–æ")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="–¥—Ä—É–≥–æ–µ")],
    ]
    update.message.reply_text("üåà –¢–≤–æ—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ORIENTATION

# –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
def orientation(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    context.user_data['orientation'] = query.data
    query.edit_message_text(f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {query.data}")
    query.message.reply_text("üî• –¢–≤–æ—è —Ä–æ–ª—å –≤ —Å–µ–∫—Å–µ:")
    return ROLE

# –†–æ–ª—å
def role(update: Update, context: CallbackContext) -> int:
    context.user_data['role'] = update.message.text
    update.message.reply_text("üìç –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –†—è–∑–∞–Ω–∏/–æ–±–ª–∞—Å—Ç–∏ —Ç—ã –∂–∏–≤–µ—à—å?")
    return LOCATION

# –õ–æ–∫–∞—Ü–∏—è
def location(update: Update, context: CallbackContext) -> int:
    context.user_data['location'] = update.message.text
    update.message.reply_text("üìù –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏:")
    return BIO

# –û —Å–µ–±–µ
def bio(update: Update, context: CallbackContext) -> int:
    context.user_data['bio'] = update.message.text
    update.message.reply_text("üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏ 1-3 —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 15 —Å–µ–∫). –û—Ç–ø—Ä–∞–≤—å '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å.")
    return PHOTO

# –§–æ—Ç–æ/–≤–∏–¥–µ–æ
def photo(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data
    if 'photos' not in user_data:
        user_data['photos'] = []

    if update.message.photo:
        photo_id = update.message.photo[-1].file_id
        user_data['photos'].append(photo_id)
    elif update.message.video:
        video_id = update.message.video.file_id
        user_data['photos'].append(video_id)
    elif update.message.text.lower() == '–≥–æ—Ç–æ–≤–æ':
        return save_data(update, context)

    if len(user_data['photos']) >= 3:
        return save_data(update, context)
    else:
        update.message.reply_text("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'.")
        return PHOTO

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
def save_data(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    data = context.user_data

    try:
        conn = get_db()
        cur = conn.cursor()
        cur.execute('''
            INSERT INTO users (user_id, name, age, orientation, role, location, bio, photos)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (user_id) DO UPDATE SET
                name = excluded.name,
                age = excluded.age,
                orientation = excluded.orientation,
                role = excluded.role,
                location = excluded.location,
                bio = excluded.bio,
                photos = excluded.photos
        ''', (
            user.id,
            data['name'],
            data['age'],
            data['orientation'],
            data['role'],
            data['location'],
            data['bio'],
            data.get('photos', [])
        ))
        conn.commit()
        update.message.reply_text("üéâ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –°–∫–æ—Ä–æ –Ω–∞–π–¥–µ–º —Ç–µ–±–µ –ø–∞—Ä—É!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("üò¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        cur.close()
        conn.close()

    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
def main():
    create_tables()
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(Filters.text, name)],
            AGE: [MessageHandler(Filters.text, age)],
            ORIENTATION: [CallbackQueryHandler(orientation)],
            ROLE: [MessageHandler(Filters.text, role)],
            LOCATION: [MessageHandler(Filters.text, location)],
            BIO: [MessageHandler(Filters.text, bio)],
            PHOTO: [MessageHandler(Filters.photo | Filters.video | Filters.text, photo)],
        },
        fallbacks=[]
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
